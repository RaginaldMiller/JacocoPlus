<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.6 -->

<plugin>
  <name>JaCoCo :: Maven Plugin</name>
  <description>The JaCoCo Maven Plugin provides the JaCoCo runtime agent to your tests and allows basic report creation.</description>
  <groupId>org.jacoco</groupId>
  <artifactId>jacoco-maven-plugin</artifactId>
  <version>0.8.4</version>
  <goalPrefix>jacoco</goalPrefix>
  <mojos>
    <mojo>
      <goal>check</goal>
      <description>Checks that the code coverage metrics are being met.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>org.jacoco.maven.CheckMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.1</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>dataFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File with execution data.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to exclude from analysis. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>haltOnFailure</name>
          <type>boolean</type>
          <required>true</required>
          <editable>true</editable>
          <description>Halt the build if any of the checks fail.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include into analysis. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>rules</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>true</editable>
          <description>Check configuration used to specify rules on element types (BUNDLE, PACKAGE, CLASS, SOURCEFILE or METHOD) with a list of limits. Each limit applies to a certain counter (INSTRUCTION, LINE, BRANCH, COMPLEXITY, METHOD, CLASS) and defines a minimum or maximum for the corresponding value (TOTALCOUNT, COVEREDCOUNT, MISSEDCOUNT, COVEREDRATIO, MISSEDRATIO). If a limit refers to a ratio the range is from 0.0 to 1.0 where the number of decimal places will also determine the precision in error messages. A limit ratio may optionally be declared as a percentage where 0.80 and 80% represent the same value, the value must end with %.

If not specified the following defaults are assumed:

-	rule element: BUNDLE
-	limit counter: INSTRUCTION
-	limit value: COVEREDRATIO

This example requires an overall instruction coverage of 80% and no class must be missed:

&lt;rules&gt;
  &lt;rule&gt;
    &lt;element&gt;BUNDLE&lt;/element&gt;
    &lt;limits&gt;
      &lt;limit&gt;
        &lt;counter&gt;INSTRUCTION&lt;/counter&gt;
        &lt;value&gt;COVEREDRATIO&lt;/value&gt;
        &lt;minimum&gt;0.80&lt;/minimum&gt;
      &lt;/limit&gt;
      &lt;limit&gt;
        &lt;counter&gt;CLASS&lt;/counter&gt;
        &lt;value&gt;MISSEDCOUNT&lt;/value&gt;
        &lt;maximum&gt;0&lt;/maximum&gt;
      &lt;/limit&gt;
    &lt;/limits&gt;
  &lt;/rule&gt;
&lt;/rules&gt;


This example requires a line coverage minimum of 50% for every class except test classes:

&lt;rules&gt;
  &lt;rule&gt;
    &lt;element&gt;CLASS&lt;/element&gt;
    &lt;excludes&gt;
      &lt;exclude&gt;*Test&lt;/exclude&gt;
    &lt;/excludes&gt;
    &lt;limits&gt;
      &lt;limit&gt;
        &lt;counter&gt;LINE&lt;/counter&gt;
        &lt;value&gt;COVEREDRATIO&lt;/value&gt;
        &lt;minimum&gt;50%&lt;/minimum&gt;
      &lt;/limit&gt;
    &lt;/limits&gt;
  &lt;/rule&gt;
&lt;/rules&gt;

</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <dataFile implementation="java.io.File" default-value="${project.build.directory}/jacoco.exec"/>
        <haltOnFailure implementation="boolean" default-value="true">${jacoco.haltOnFailure}</haltOnFailure>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>dump</goal>
      <description>Request a dump over TCP/IP from a JaCoCo agent running in tcpserver mode.

Note concerning parallel builds: While the dump goal as such is thread safe, it has to be considered that TCP/IP server ports of the agents are a shared resource.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>post-integration-test</phase>
      <implementation>org.jacoco.maven.DumpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.4</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>address</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>IP address or hostname to connect to.</description>
        </parameter>
        <parameter>
          <name>append</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true and the execution data file already exists, coverage data is appended to the existing file. If set to false, an existing execution data file will be replaced.</description>
        </parameter>
        <parameter>
          <name>destFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to the output file for execution data.</description>
        </parameter>
        <parameter>
          <name>dump</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets whether execution data should be downloaded from the remote host.</description>
        </parameter>
        <parameter>
          <name>port</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port number to connect to. If multiple JaCoCo agents should run on the same machine, different ports have to be specified for the agents.</description>
        </parameter>
        <parameter>
          <name>reset</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Sets whether a reset command should be sent after the execution data has been dumped.</description>
        </parameter>
        <parameter>
          <name>retryCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>Number of retries which the goal will attempt to establish a connection. This can be used to wait until the target JVM is successfully launched.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <address implementation="java.lang.String">${jacoco.address}</address>
        <append implementation="boolean" default-value="true">${jacoco.append}</append>
        <destFile implementation="java.io.File" default-value="${project.build.directory}/jacoco.exec">${jacoco.destFile}</destFile>
        <dump implementation="boolean" default-value="true">${jacoco.dump}</dump>
        <port implementation="int" default-value="6300">${jacoco.port}</port>
        <reset implementation="boolean" default-value="false">${jacoco.reset}</reset>
        <retryCount implementation="int" default-value="10">${jacoco.retryCount}</retryCount>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on jacoco-maven-plugin.
Call mvn jacoco:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.jacoco.maven.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>instrument</goal>
      <description>Performs offline instrumentation. Note that after execution of test you must restore original classes with help of &apos;restore-instrumented-classes&apos; goal.
Warning: The preferred way for code coverage analysis with JaCoCo is on-the-fly instrumentation. Offline instrumentation has several drawbacks and should only be used if a specific scenario explicitly requires this mode. Please consult documentation about offline instrumentation before using this mode.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-classes</phase>
      <implementation>org.jacoco.maven.InstrumentMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to exclude from instrumentation. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in instrumentation. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>merge</goal>
      <description>Mojo for merging a set of execution data files (*.exec) into a single file</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-resources</phase>
      <implementation>org.jacoco.maven.MergeMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.4</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>destFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to the output file for execution data.</description>
        </parameter>
        <parameter>
          <name>fileSets</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>true</editable>
          <description>This mojo accepts any number of execution data file sets.
&lt;fileSets&gt;
  &lt;fileSet&gt;
    &lt;directory&gt;${project.build.directory}&lt;/directory&gt;
    &lt;includes&gt;
      &lt;include&gt;*.exec&lt;/include&gt;
    &lt;/includes&gt;
  &lt;/fileSet&gt;
&lt;/fileSets&gt;

</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <destFile implementation="java.io.File" default-value="${project.build.directory}/jacoco.exec">${jacoco.destFile}</destFile>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>prepare-agent</goal>
      <description>Prepares a property pointing to the JaCoCo runtime agent that can be passed as a VM argument to the application under test. Depending on the project packaging type by default a property with the following name is set:

-	tycho.testArgLine for packaging type eclipse-test-plugin and
-	argLine otherwise.

If your project already defines VM arguments for test execution, be sure that they will include property defined by JaCoCo.

One of the ways to do this in case of maven-surefire-plugin - is to use syntax for late property evaluation:

  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
      &lt;argLine&gt;@{argLine} -your -extra -arguments&lt;/argLine&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;

You can define empty property to avoid JVM startup error Could not find or load main class @{argLine} when using late property evaluation and jacoco-maven-plugin not executed.

Another way is to define &apos;argLine&apos; as a Maven property rather than as part of the configuration of maven-surefire-plugin:

  &lt;properties&gt;
    &lt;argLine&gt;-your -extra -arguments&lt;/argLine&gt;
  &lt;/properties&gt;
  ...
  &lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
      &lt;!-- no argLine here --&gt;
    &lt;/configuration&gt;
  &lt;/plugin&gt;

Resulting coverage information is collected during execution and by default written to a file when the process terminates.
</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>initialize</phase>
      <implementation>org.jacoco.maven.AgentMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.5.3</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>address</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>IP address or hostname to bind to when the output method is tcpserver or connect to when the output method is tcpclient. In tcpserver mode the value &apos;*&apos; causes the agent to accept connections on any local address.</description>
        </parameter>
        <parameter>
          <name>append</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true and the execution data file already exists, coverage data is appended to the existing file. If set to false, an existing execution data file will be replaced.</description>
        </parameter>
        <parameter>
          <name>classDumpDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>If a directory is specified for this parameter the JaCoCo agent dumps all class files it processes to the given location. This can be useful for debugging purposes or in case of dynamically created classes for example when scripting engines are used.</description>
        </parameter>
        <parameter>
          <name>destFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to the output file for execution data.</description>
        </parameter>
        <parameter>
          <name>dumpOnExit</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true coverage data will be written on VM shutdown.</description>
        </parameter>
        <parameter>
          <name>exclClassLoaders</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class loader names, that should be excluded from execution analysis. The list entries are separated by a colon (:) and may use wildcard characters (* and ?). This option might be required in case of special frameworks that conflict with JaCoCo code instrumentation, in particular class loaders that do not have access to the Java runtime classes.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class names to exclude from instrumentation. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>inclBootstrapClasses</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether also classes from the bootstrap classloader should be instrumented. Use this feature with caution, it needs heavy includes/excludes tuning.</description>
        </parameter>
        <parameter>
          <name>inclNoLocationClasses</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether classes without source location should be instrumented.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class names to include in instrumentation. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>jmx</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the agent exposes functionality via JMX.</description>
        </parameter>
        <parameter>
          <name>output</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output method to use for writing coverage data. Valid options are:
-	file: At VM termination execution data is written to a file.
-	tcpserver: The agent listens for incoming connections on the TCP port specified by the address and port. Execution data is written to this TCP connection.
-	tcpclient: At startup the agent connects to the TCP port specified by the address and port. Execution data is written to this TCP connection.
-	none: Do not produce any output.
</description>
        </parameter>
        <parameter>
          <name>port</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to bind to when the output method is tcpserver or connect to when the output method is tcpclient. In tcpserver mode the port must be available, which means that if multiple JaCoCo agents should run on the same machine, different ports have to be specified.</description>
        </parameter>
        <parameter>
          <name>propertyName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to specify property which will contains settings for JaCoCo Agent. If not specified, then &apos;argLine&apos; would be used for &apos;jar&apos; packaging and &apos;tycho.testArgLine&apos; for &apos;eclipse-test-plugin&apos;.</description>
        </parameter>
        <parameter>
          <name>sessionId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A session identifier that is written with the execution data. Without this parameter a random identifier is created by the agent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <address implementation="java.lang.String">${jacoco.address}</address>
        <append implementation="java.lang.Boolean">${jacoco.append}</append>
        <classDumpDir implementation="java.io.File">${jacoco.classDumpDir}</classDumpDir>
        <destFile implementation="java.io.File" default-value="${project.build.directory}/jacoco.exec">${jacoco.destFile}</destFile>
        <dumpOnExit implementation="java.lang.Boolean">${jacoco.dumpOnExit}</dumpOnExit>
        <exclClassLoaders implementation="java.lang.String">${jacoco.exclClassLoaders}</exclClassLoaders>
        <inclBootstrapClasses implementation="java.lang.Boolean">${jacoco.inclBootstrapClasses}</inclBootstrapClasses>
        <inclNoLocationClasses implementation="java.lang.Boolean">${jacoco.inclNoLocationClasses}</inclNoLocationClasses>
        <jmx implementation="java.lang.Boolean">${jacoco.jmx}</jmx>
        <output implementation="java.lang.String">${jacoco.output}</output>
        <port implementation="java.lang.Integer">${jacoco.port}</port>
        <propertyName implementation="java.lang.String">${jacoco.propertyName}</propertyName>
        <sessionId implementation="java.lang.String">${jacoco.sessionId}</sessionId>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>prepare-agent-integration</goal>
      <description>Same as prepare-agent, but provides default values suitable for integration-tests:
-	bound to pre-integration-test phase
-	different destFile
</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>pre-integration-test</phase>
      <implementation>org.jacoco.maven.AgentITMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.4</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>address</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>IP address or hostname to bind to when the output method is tcpserver or connect to when the output method is tcpclient. In tcpserver mode the value &apos;*&apos; causes the agent to accept connections on any local address.</description>
        </parameter>
        <parameter>
          <name>append</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true and the execution data file already exists, coverage data is appended to the existing file. If set to false, an existing execution data file will be replaced.</description>
        </parameter>
        <parameter>
          <name>classDumpDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>If a directory is specified for this parameter the JaCoCo agent dumps all class files it processes to the given location. This can be useful for debugging purposes or in case of dynamically created classes for example when scripting engines are used.</description>
        </parameter>
        <parameter>
          <name>destFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to the output file for execution data.</description>
        </parameter>
        <parameter>
          <name>dumpOnExit</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true coverage data will be written on VM shutdown.</description>
        </parameter>
        <parameter>
          <name>exclClassLoaders</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class loader names, that should be excluded from execution analysis. The list entries are separated by a colon (:) and may use wildcard characters (* and ?). This option might be required in case of special frameworks that conflict with JaCoCo code instrumentation, in particular class loaders that do not have access to the Java runtime classes.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class names to exclude from instrumentation. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>inclBootstrapClasses</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether also classes from the bootstrap classloader should be instrumented. Use this feature with caution, it needs heavy includes/excludes tuning.</description>
        </parameter>
        <parameter>
          <name>inclNoLocationClasses</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies whether classes without source location should be instrumented.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class names to include in instrumentation. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>jmx</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the agent exposes functionality via JMX.</description>
        </parameter>
        <parameter>
          <name>output</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output method to use for writing coverage data. Valid options are:
-	file: At VM termination execution data is written to a file.
-	tcpserver: The agent listens for incoming connections on the TCP port specified by the address and port. Execution data is written to this TCP connection.
-	tcpclient: At startup the agent connects to the TCP port specified by the address and port. Execution data is written to this TCP connection.
-	none: Do not produce any output.
</description>
        </parameter>
        <parameter>
          <name>port</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Port to bind to when the output method is tcpserver or connect to when the output method is tcpclient. In tcpserver mode the port must be available, which means that if multiple JaCoCo agents should run on the same machine, different ports have to be specified.</description>
        </parameter>
        <parameter>
          <name>propertyName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to specify property which will contains settings for JaCoCo Agent. If not specified, then &apos;argLine&apos; would be used for &apos;jar&apos; packaging and &apos;tycho.testArgLine&apos; for &apos;eclipse-test-plugin&apos;.</description>
        </parameter>
        <parameter>
          <name>sessionId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A session identifier that is written with the execution data. Without this parameter a random identifier is created by the agent.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <address implementation="java.lang.String">${jacoco.address}</address>
        <append implementation="java.lang.Boolean">${jacoco.append}</append>
        <classDumpDir implementation="java.io.File">${jacoco.classDumpDir}</classDumpDir>
        <destFile implementation="java.io.File" default-value="${project.build.directory}/jacoco-it.exec">${jacoco.destFile}</destFile>
        <dumpOnExit implementation="java.lang.Boolean">${jacoco.dumpOnExit}</dumpOnExit>
        <exclClassLoaders implementation="java.lang.String">${jacoco.exclClassLoaders}</exclClassLoaders>
        <inclBootstrapClasses implementation="java.lang.Boolean">${jacoco.inclBootstrapClasses}</inclBootstrapClasses>
        <inclNoLocationClasses implementation="java.lang.Boolean">${jacoco.inclNoLocationClasses}</inclNoLocationClasses>
        <jmx implementation="java.lang.Boolean">${jacoco.jmx}</jmx>
        <output implementation="java.lang.String">${jacoco.output}</output>
        <port implementation="java.lang.Integer">${jacoco.port}</port>
        <propertyName implementation="java.lang.String">${jacoco.propertyName}</propertyName>
        <sessionId implementation="java.lang.String">${jacoco.sessionId}</sessionId>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
    <mojo>
      <goal>report</goal>
      <description>Creates a code coverage report for tests of a single project in multiple formats (HTML, XML, and CSV).</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>org.jacoco.maven.ReportMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.5.3</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>dataFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File with execution data.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to exclude from the report. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Footer text used in HTML report pages.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in the report. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output directory for the reports. Note that this parameter is only relevant if the goal is run from the command line or from the default build lifecycle. If the goal is run indirectly as part of a site generation, the output directory configured in the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>outputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the generated reports.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the source files.</description>
        </parameter>
        <parameter>
          <name>title</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the root node HTML report pages.</description>
        </parameter>
      </parameters>
      <configuration>
        <dataFile implementation="java.io.File" default-value="${project.build.directory}/jacoco.exec">${jacoco.dataFile}</dataFile>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/jacoco"/>
        <outputEncoding implementation="java.lang.String" default-value="UTF-8">${project.reporting.outputEncoding}</outputEncoding>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
        <sourceEncoding implementation="java.lang.String" default-value="UTF-8">${project.build.sourceEncoding}</sourceEncoding>
        <title implementation="java.lang.String" default-value="${project.name}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>report-aggregate</goal>
      <description>Creates a structured code coverage report (HTML, XML, and CSV) from multiple projects within reactor. The report is created from all modules this project depends on. From those projects class and source files as well as JaCoCo execution data files will be collected. In addition execution data is collected from the project itself. This also allows to create coverage reports when tests are in separate projects than the code under test, for example in case of integration tests.

Using the dependency scope allows to distinguish projects which contribute execution data but should not become part of the report:

-	compile, runtime, provided: Project source and execution data is included in the report.
-	test: Only execution data is considered for the report.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>org.jacoco.maven.ReportAggregateMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.7.7</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>dataFileExcludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of execution data files to exclude from the report. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>dataFileIncludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of execution data files to include in the report from each project. May use wildcard characters (* and ?). When not specified all *.exec files from the target folder will be included.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to exclude from the report. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Footer text used in HTML report pages.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in the report. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output directory for the reports. Note that this parameter is only relevant if the goal is run from the command line or from the default build lifecycle. If the goal is run indirectly as part of a site generation, the output directory configured in the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>outputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the generated reports.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the source files.</description>
        </parameter>
        <parameter>
          <name>title</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the root node HTML report pages.</description>
        </parameter>
      </parameters>
      <configuration>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/jacoco-aggregate"/>
        <outputEncoding implementation="java.lang.String" default-value="UTF-8">${project.reporting.outputEncoding}</outputEncoding>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
        <sourceEncoding implementation="java.lang.String" default-value="UTF-8">${project.build.sourceEncoding}</sourceEncoding>
        <title implementation="java.lang.String" default-value="${project.name}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>report-integration</goal>
      <description>Same as report, but provides default values suitable for integration-tests:
-	bound to report-integration phase
-	different dataFile
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>org.jacoco.maven.ReportITMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.4</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>dataFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>File with execution data.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to exclude from the report. May use wildcard characters (* and ?). When not specified nothing will be excluded.</description>
        </parameter>
        <parameter>
          <name>footer</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Footer text used in HTML report pages.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of class files to include in the report. May use wildcard characters (* and ?). When not specified everything will be included.</description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Output directory for the reports. Note that this parameter is only relevant if the goal is run from the command line or from the default build lifecycle. If the goal is run indirectly as part of a site generation, the output directory configured in the Maven Site Plugin is used instead.</description>
        </parameter>
        <parameter>
          <name>outputEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the generated reports.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Encoding of the source files.</description>
        </parameter>
        <parameter>
          <name>title</name>
          <type>java.lang.String</type>
          <since>0.7.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the root node HTML report pages.</description>
        </parameter>
      </parameters>
      <configuration>
        <dataFile implementation="java.io.File" default-value="${project.build.directory}/jacoco-it.exec"/>
        <outputDirectory implementation="java.io.File" default-value="${project.reporting.outputDirectory}/jacoco-it"/>
        <outputEncoding implementation="java.lang.String" default-value="UTF-8">${project.reporting.outputEncoding}</outputEncoding>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
        <sourceEncoding implementation="java.lang.String" default-value="UTF-8">${project.build.sourceEncoding}</sourceEncoding>
        <title implementation="java.lang.String" default-value="${project.name}"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>restore-instrumented-classes</goal>
      <description>Restores original classes as they were before offline instrumentation.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>prepare-package</phase>
      <implementation>org.jacoco.maven.RestoreMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <since>0.6.2</since>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag used to suppress execution.</description>
        </parameter>
      </parameters>
      <configuration>
        <skip implementation="boolean" default-value="false">${jacoco.skip}</skip>
      </configuration>
    </mojo>
  </mojos>
</plugin>